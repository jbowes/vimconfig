snippet if
	if ${1:condition}
		${2:code}
	end
snippet ife
	if ${1:condition}
		${2:code}
	else
		${3:code}
	end
	${4}
snippet else
	else
		${1:code}
	end
snippet elseif
	else if ${1:condition}
		${2:code}
	end
snippet each
	${1:collection}.each do |${2:item}|
		${3:code}
	end
snippet ieach
	${1:collection}.each_with_index do |${2:item}, ${3:index}|
		${4:code}
	end
snippet i18n
	<%= I18n.t('${1:translation}') %>
snippet def
	def ${1:method}${2}
	end${3}
snippet sdef
	def ${1:method}${2}
	end${3}
snippet pry
	require 'pry'
	pry${1}
snippet cl
	class ${1}
	end
snippet setup
	setup do
		${1}
	end
snippet td
	teardown do
		${1}
	end
snippet should
	should '${1}' do
		${2}
	end
snippet fgbs
	@${1:item} = FactoryGirl.build_stubbed(:$1)${2}
snippet fgbc
	@${1:item} = FactoryGirl.create(:$1)${2}
snippet context
	context ${1} do
		${2}
	end
snippet tu
	require 'test_helper'

	class ${1:class}Test < ActiveSupport::TestCase
		context $1 do
			${2}
		end
	end
snippet it
	it "should ${1:more}" do
		${2}
	end
snippet desc
	describe "${1:describe}" do
		${2}
	end
snippet before
	before do
		${1}
	end
snippet after
	after do
		${1}
	end
snippet rm
	require "rails_helper"

	RSpec.describe ${1:model}, :type => :${2:model} do
		${3}
	end
snippet expect
	expect(${1:what}).to ${2:dowhat}
snippet change
	expect {
		${1:action}
	}.to change { ${2:change} }.by ${3:amount}
snippet redi
	expect(response).to redirect_to(${1:route}_path${2})
snippet resp
	expect(response.status).to eq(${1:200})
snippet temp
	expect(response).to render_template(:${1:template})
snippet assign
	expect(assigns(:${1:var})).to eq(${2:equal})
snippet iass
	expect(assigns(:${1:var})).to be_truthy
snippet etr
	expect(${1:var}).to be true
snippet efa
	expect(${1:var}).to be false
snippet rr
	require_relative '${1}'
snippet mt
	require 'minitest/autorun'

	class ${1:Class}Test < Minitest::Test
		${2}
	end
